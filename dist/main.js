(()=>{var n={426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700;900&display=swap);"]),i.push([n.id,"*, *::after, *::before{\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto';\n}\n\n.title{\n    background-color: #0b2545;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 40px;\n    height: 15vh;\n}\n\n#container{\n    background-color: #0b2545;\n    height: 85vh;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.container{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nh2{\n    color: white;\n}\n\n#gbPlayer, #gbComputer{\n    width: 400px;\n    height: 400px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    border: 20px solid #326990;\n    border-radius: 5%;\n}\n\n.grid{\n    width: 40px;\n    height: 40px;\n    background-color: green;\n    box-sizing: border-box;\n    border: .1px solid gray;\n}\n\n.grid:hover{\n    opacity: 0.5;\n}\n\n#popup{\n    position: absolute;\n    top: 0;\n    z-index: 0;\n    display: none;\n    height: 100vh;\n    width: 100vw;\n    background-color: black;\n    opacity: 0.8;\n    justify-content: center;\n    align-items: center;\n}\n\n.result{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 40px;\n}\n\n.text{\n    color: #e8002a;\n    font-size: 2rem;\n}\n\n.winner{\n    color: #FF0000;\n    font-size: 3rem;\n}\n\n.restart{\n    background-color: lightblue;\n    border: none;\n    border-radius: 50px;\n    font-size: 1.5rem;\n    padding: 20px;\n}\n\n.restart:hover{\n    opacity: 0.5;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,SAAS;IACT,UAAU;IACV,qBAAqB;AACzB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,eAAe;IACf,2BAA2B;IAC3B,yBAAyB;IACzB,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,UAAU;IACV,aAAa;IACb,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,YAAY;IACZ,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,2BAA2B;IAC3B,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700;900&display=swap');\n\n*, *::after, *::before{\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto';\n}\n\n.title{\n    background-color: #0b2545;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 40px;\n    height: 15vh;\n}\n\n#container{\n    background-color: #0b2545;\n    height: 85vh;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.container{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nh2{\n    color: white;\n}\n\n#gbPlayer, #gbComputer{\n    width: 400px;\n    height: 400px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    border: 20px solid #326990;\n    border-radius: 5%;\n}\n\n.grid{\n    width: 40px;\n    height: 40px;\n    background-color: green;\n    box-sizing: border-box;\n    border: .1px solid gray;\n}\n\n.grid:hover{\n    opacity: 0.5;\n}\n\n#popup{\n    position: absolute;\n    top: 0;\n    z-index: 0;\n    display: none;\n    height: 100vh;\n    width: 100vw;\n    background-color: black;\n    opacity: 0.8;\n    justify-content: center;\n    align-items: center;\n}\n\n.result{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 40px;\n}\n\n.text{\n    color: #e8002a;\n    font-size: 2rem;\n}\n\n.winner{\n    color: #FF0000;\n    font-size: 3rem;\n}\n\n.restart{\n    background-color: lightblue;\n    border: none;\n    border-radius: 50px;\n    font-size: 1.5rem;\n    padding: 20px;\n}\n\n.restart:hover{\n    opacity: 0.5;\n}"],sourceRoot:""}]);const c=i},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var l=n[c],s=r.base?l[0]+r.base:l[0],A=a[s]||0,u="".concat(s," ").concat(A);a[s]=A+1;var p=t(u),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var f=o(d,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var l=r(n,o),s=0;s<a.length;s++){var A=t(a[s]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},325:(n,e,t)=>{const r=t(884);n.exports=()=>{let n=new Array(10).fill().map((()=>Array(10).fill(null))),e=[];return{board:n,placeShip:(t,o,a,i)=>{let c;switch(t){case"Carrier":c=5;break;case"Battleship":c=4;break;case"Destroyer":case"Submarine":c=3;break;case"PatrolBoat":c=2}switch(t=r(c,t),e.push(t),i){case"horizontal":for(let e=0;e<c;e++)n[o][a+e]=[t,e];break;case"vertical":for(let e=0;e<c;e++)n[o+e][a]=[t,e]}},receiveAttack:(e,t)=>{null==n[e][t]?n[e][t]="miss":"miss"==n[e][t]||"hit"==n[e][t]?console.log("invalid attack"):(n[e][t][0].hit(n[e][t][1]),n[e][t][2]="hit")},allSunk:()=>{for(let n=0;n<e.length;n++)if(0==e[n].isSunk())return!1;return!0}}}},62:(n,e,t)=>{const r=t(325);n.exports=()=>{const n=r(),e=r();return{gbPlayer:n,gbComputer:e,attack:(t,r)=>{if(null==e.board[t][r]||null!=e.board[t][r]&&"hit"!=e.board[t][r][2]&&"miss"!=e.board[t][r])for(e.receiveAttack(t,r);;){let e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(null==n.board[e][t]||null!=n.board[e][t]&&"hit"!=n.board[e][t][2]&&"miss"!=n.board[e][t]){n.receiveAttack(e,t);break}}}}}},884:n=>{n.exports=(n,e)=>{let t=[],r=[],o=n;for(let e=0;e<n;e++)t[e]=e;const a=()=>0==o;return{getHealth:()=>n,getName:()=>e,isSunk:a,hit:n=>{t.includes(n)&&(o--,r.push(n),r=r.sort((function(n,e){return n-e}))),a()},deckHit:r}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{"use strict";var n=t(62),e=t.n(n);const r=document.getElementById("popup");function o(n){r.style.display="flex",document.querySelector(".winner").textContent=n}function a(n){n.gbComputer.allSunk()?o("YOU"):n.gbPlayer.allSunk()&&o("General Robot")}document.querySelector(".restart").addEventListener("click",(()=>{r.style.display="none",window.location.reload()}));const i=document.getElementById("gbPlayer"),c=document.getElementById("gbComputer");function l(n,e){const t=new Array(10).fill().map((()=>Array(10).fill(null)));for(let r=0;r<n;r++)for(let o=0;o<n;o++)t[r][o]=document.createElement("div"),t[r][o].classList.add("grid"),null==e.gbPlayer.board[r][o]?t[r][o].style.backgroundColor="rgb(255,255,255)":"miss"==e.gbPlayer.board[r][o]?t[r][o].style.backgroundColor="rgb(0,0,0)":"hit"==e.gbPlayer.board[r][o][2]?t[r][o].style.backgroundColor="rgb(255,0,0)":t[r][o].style.backgroundColor="rgb(0,255,0)",i.appendChild(t[r][o])}function s(n){for(;n.firstChild;)n.removeChild(n.firstChild)}var A=t(379),u=t.n(A),p=t(795),d=t.n(p),f=t(569),b=t.n(f),g=t(565),h=t.n(g),m=t(216),C=t.n(m),y=t(589),v=t.n(y),B=t(426),I={};I.styleTagTransform=v(),I.setAttributes=h(),I.insert=b().bind(null,"head"),I.domAPI=d(),I.insertStyleElement=C(),u()(B.Z,I),B.Z&&B.Z.locals&&B.Z.locals;const x=e()();x.gbPlayer.placeShip("Carrier",0,0,"vertical"),x.gbPlayer.placeShip("Battleship",1,1,"vertical"),x.gbPlayer.placeShip("Destroyer",2,2,"vertical"),x.gbPlayer.placeShip("Submarine",3,3,"vertical"),x.gbPlayer.placeShip("PatrolBoat",4,4,"vertical"),x.gbComputer.placeShip("Carrier",0,0,"vertical"),x.gbComputer.placeShip("Battleship",1,1,"vertical"),x.gbComputer.placeShip("Destroyer",2,2,"vertical"),x.gbComputer.placeShip("Submarine",3,3,"vertical"),x.gbComputer.placeShip("PatrolBoat",4,4,"vertical"),l(10,x),function n(e,t){const r=new Array(10).fill().map((()=>Array(10).fill(null)));for(let o=0;o<e;o++)for(let A=0;A<e;A++)r[o][A]=document.createElement("div"),r[o][A].classList.add("grid"),null==t.gbComputer.board[o][A]?r[o][A].style.backgroundColor="rgb(255,255,255)":"miss"==t.gbComputer.board[o][A]?r[o][A].style.backgroundColor="rgb(0,0,0)":"hit"==t.gbComputer.board[o][A][2]?r[o][A].style.backgroundColor="rgb(255,0,0)":r[o][A].style.backgroundColor="rgb(255,255,255)",c.appendChild(r[o][A]),r[o][A].addEventListener("click",(()=>{s(i),s(c),t.attack(o,A),l(e,t),n(e,t),a(t)}))}(10,x)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,